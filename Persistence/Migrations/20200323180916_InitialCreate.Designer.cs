// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200323180916_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("Domain.DepartureDayTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RouteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("DepartureDayTimes");
                });

            modelBuilder.Entity("Domain.DepartureTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartureDayTimeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartureDayTimeId");

                    b.ToTable("DepartureTimes");
                });

            modelBuilder.Entity("Domain.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CentralNode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Domain.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EndNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StartNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TransportId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VanguardTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EndNodeId");

                    b.HasIndex("StartNodeId");

                    b.HasIndex("TransportId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Domain.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("Domain.DepartureDayTime", b =>
                {
                    b.HasOne("Domain.Route", null)
                        .WithMany("DepartureDayTime")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("Domain.DepartureTime", b =>
                {
                    b.HasOne("Domain.DepartureDayTime", null)
                        .WithMany("DepartureTimes")
                        .HasForeignKey("DepartureDayTimeId");
                });

            modelBuilder.Entity("Domain.Route", b =>
                {
                    b.HasOne("Domain.Node", "EndNode")
                        .WithMany()
                        .HasForeignKey("EndNodeId");

                    b.HasOne("Domain.Node", "StartNode")
                        .WithMany()
                        .HasForeignKey("StartNodeId");

                    b.HasOne("Domain.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportId");
                });
#pragma warning restore 612, 618
        }
    }
}
